Human vs Human
=====================================================================================================

Player 1 always starts first.

1. Player 1 rolls the dice (randomly generate 3 numbers between 1-12).
2. Player 1 uses the numbers to form a mathematical expression utilizing.
    the mathematical operations of addition (+), subtraction (-), multiplication (*),
    division (/), and exponentiation (**) along with parentheses (), to pick a number on the grid.
3. System uses eval() to evaluate the expression and, upon calculation:
    [a] If the square is available on the grid:
        <1> Calculates the total win potential (defined in the notes).
            ~a~ If at any point, win potential == 5/6, assign the square to Human and declare Human as the winner.
        <2> Else, simply assign the square to player 1.
    [b] Else, prompts player 1 to try another square, and step 3 repeats.
4. System calculates the number of neighbors player 1's selection has, and updates player 1's points.
    [a] If player 1's points reach 0, they are declared the winner.
5. Once Player 1 is done, the turn goes to player 2, and steps (1)-(4) repeat. 

--- Note: Either player may choose to "PASS", in which case the turn goes to the other player. ---


Human vs Computer
=====================================================================================================

Human (Player 1) always starts first. Computer is Player 2.

1. Human rolls the dice (randomly generate 3 numbers between 1-12).
2. Human uses the numbers to form a mathematical expression utilizing.
    the mathematical operations of addition (+), subtraction (-), multiplication (*),
    division (/), and exponentiation (**) along with parentheses (), to pick a number on the grid.
3. System uses eval() to evaluate the expression and, upon calculation:
    [a] If the square is available on the grid:
        <1> Calculates the total win potential (defined in the notes).
            ~a~ If at any point, win potential == 5/6, assign the square to Human and declare Human as the winner.
        <2> Else, simply assign the square to Human.
    [b] Else, prompts Human to try another square, and step 3 repeats.
4. System calculates the number of neighbors Human's selection has, and updates Human's points.
    [a] If Human's points reach 0, they are declared the winner.
5. Once Human is done, the turn goes to the computer (player 2).
6. System "rolls the dice".
7. System will use generate_arithmetic_combos() to obtain the set of all possible numbers derivable from
    the three dice. Filter this set to keep only numbers that are not taken by Human or Computer (i.e. empty).
8. 
    [a] If there are no such numbers, system will "PASS", and turn goes to the human.
    [b] Else, for each possible derivable number:
        <1> Calculate the total winning potential and blocking factor (both outlined in notes).
            ~a~ If at any point, win potential == 5/6, System takes this square and declares itself the winner.
        <2> Calculate the number of neighbors.
            (a) If the neighbor score of the System will become 0, System takes this square and declares itself the winner.
        <3> Compute the total score for this number as:

            Score(number) = 0.4*Winning_Potential(number) + 0.4*Neighbors(number) + 0.2*Blocking_Factor(number)

            This is to emphasize getting a winning streak of 6 and reducing points over blocking the other player.
            As such, the system will not block you at the expense of its own points and winning streak. 

    [c] Choose the option with the highest possible score. 
9. Mark the selected square, and update points accordingly.

The above steps are repeated until there is a winner.